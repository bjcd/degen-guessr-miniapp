// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class SpinInitiated extends ethereum.Event {
  get params(): SpinInitiated__Params {
    return new SpinInitiated__Params(this);
  }
}

export class SpinInitiated__Params {
  _event: SpinInitiated;

  constructor(event: SpinInitiated) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get potBefore(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SpinResult extends ethereum.Event {
  get params(): SpinResult__Params {
    return new SpinResult__Params(this);
  }
}

export class SpinResult__Params {
  _event: SpinResult;

  constructor(event: SpinResult) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get roll(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get category(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get payout(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get potAfter(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PotSeeded extends ethereum.Event {
  get params(): PotSeeded__Params {
    return new PotSeeded__Params(this);
  }
}

export class PotSeeded__Params {
  _event: PotSeeded;

  constructor(event: PotSeeded) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newPot(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TreasuryWithdrawn extends ethereum.Event {
  get params(): TreasuryWithdrawn__Params {
    return new TreasuryWithdrawn__Params(this);
  }
}

export class TreasuryWithdrawn__Params {
  _event: TreasuryWithdrawn;

  constructor(event: TreasuryWithdrawn) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DegenSlot__getGameConstantsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getCostPerSpin(): BigInt {
    return this.value0;
  }

  getPotAddPerSpin(): BigInt {
    return this.value1;
  }

  getTreasuryAddPerSpin(): BigInt {
    return this.value2;
  }

  getInitialPot(): BigInt {
    return this.value3;
  }
}

export class DegenSlot__getPayoutsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getJackpotPayout(): BigInt {
    return this.value0;
  }

  getThreeSamePayout(): BigInt {
    return this.value1;
  }

  getTwoSamePayout(): BigInt {
    return this.value2;
  }
}

export class DegenSlot__getProbabilityThresholdsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getJackpotStart(): BigInt {
    return this.value0;
  }

  getJackpotEnd(): BigInt {
    return this.value1;
  }

  getThreeSameStart(): BigInt {
    return this.value2;
  }

  getThreeSameEnd(): BigInt {
    return this.value3;
  }

  getTwoSameStart(): BigInt {
    return this.value4;
  }

  getTwoSameEnd(): BigInt {
    return this.value5;
  }

  getNothingStart(): BigInt {
    return this.value6;
  }

  getNothingEnd(): BigInt {
    return this.value7;
  }
}

export class DegenSlot extends ethereum.SmartContract {
  static bind(address: Address): DegenSlot {
    return new DegenSlot("DegenSlot", address);
  }

  getGameConstants(): DegenSlot__getGameConstantsResult {
    let result = super.call(
      "getGameConstants",
      "getGameConstants():(uint256,uint256,uint256,uint256)",
      [],
    );

    return new DegenSlot__getGameConstantsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
    );
  }

  try_getGameConstants(): ethereum.CallResult<DegenSlot__getGameConstantsResult> {
    let result = super.tryCall(
      "getGameConstants",
      "getGameConstants():(uint256,uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DegenSlot__getGameConstantsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
      ),
    );
  }

  getPot(): BigInt {
    let result = super.call("getPot", "getPot():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPot", "getPot():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTreasuryBalance(): BigInt {
    let result = super.call(
      "getTreasuryBalance",
      "getTreasuryBalance():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTreasuryBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTreasuryBalance",
      "getTreasuryBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwner(): Address {
    let result = super.call("getOwner", "getOwner():(address)", []);

    return result[0].toAddress();
  }

  try_getOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPayouts(): DegenSlot__getPayoutsResult {
    let result = super.call(
      "getPayouts",
      "getPayouts():(uint256,uint256,uint256)",
      [],
    );

    return new DegenSlot__getPayoutsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_getPayouts(): ethereum.CallResult<DegenSlot__getPayoutsResult> {
    let result = super.tryCall(
      "getPayouts",
      "getPayouts():(uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DegenSlot__getPayoutsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  getProbabilityThresholds(): DegenSlot__getProbabilityThresholdsResult {
    let result = super.call(
      "getProbabilityThresholds",
      "getProbabilityThresholds():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [],
    );

    return new DegenSlot__getProbabilityThresholdsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
    );
  }

  try_getProbabilityThresholds(): ethereum.CallResult<DegenSlot__getProbabilityThresholdsResult> {
    let result = super.tryCall(
      "getProbabilityThresholds",
      "getProbabilityThresholds():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DegenSlot__getProbabilityThresholdsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
      ),
    );
  }

  getTreasuryBalance1(): BigInt {
    let result = super.call(
      "getTreasuryBalance",
      "getTreasuryBalance():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTreasuryBalance1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTreasuryBalance",
      "getTreasuryBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasPendingRequest(player: Address): boolean {
    let result = super.call(
      "hasPendingRequest",
      "hasPendingRequest(address):(bool)",
      [ethereum.Value.fromAddress(player)],
    );

    return result[0].toBoolean();
  }

  try_hasPendingRequest(player: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasPendingRequest",
      "hasPendingRequest(address):(bool)",
      [ethereum.Value.fromAddress(player)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  requestToPlayer(requestId: BigInt): Address {
    let result = super.call(
      "requestToPlayer",
      "requestToPlayer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(requestId)],
    );

    return result[0].toAddress();
  }

  try_requestToPlayer(requestId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "requestToPlayer",
      "requestToPlayer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(requestId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _degenToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _vrfCoordinator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _keyHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _callbackGasLimit(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _requestConfirmations(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddToPotCall extends ethereum.Call {
  get inputs(): AddToPotCall__Inputs {
    return new AddToPotCall__Inputs(this);
  }

  get outputs(): AddToPotCall__Outputs {
    return new AddToPotCall__Outputs(this);
  }
}

export class AddToPotCall__Inputs {
  _call: AddToPotCall;

  constructor(call: AddToPotCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddToPotCall__Outputs {
  _call: AddToPotCall;

  constructor(call: AddToPotCall) {
    this._call = call;
  }
}

export class ConnectWalletCall extends ethereum.Call {
  get inputs(): ConnectWalletCall__Inputs {
    return new ConnectWalletCall__Inputs(this);
  }

  get outputs(): ConnectWalletCall__Outputs {
    return new ConnectWalletCall__Outputs(this);
  }
}

export class ConnectWalletCall__Inputs {
  _call: ConnectWalletCall;

  constructor(call: ConnectWalletCall) {
    this._call = call;
  }
}

export class ConnectWalletCall__Outputs {
  _call: ConnectWalletCall;

  constructor(call: ConnectWalletCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class SpinCall extends ethereum.Call {
  get inputs(): SpinCall__Inputs {
    return new SpinCall__Inputs(this);
  }

  get outputs(): SpinCall__Outputs {
    return new SpinCall__Outputs(this);
  }
}

export class SpinCall__Inputs {
  _call: SpinCall;

  constructor(call: SpinCall) {
    this._call = call;
  }
}

export class SpinCall__Outputs {
  _call: SpinCall;

  constructor(call: SpinCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class ClearStuckPendingRequestCall extends ethereum.Call {
  get inputs(): ClearStuckPendingRequestCall__Inputs {
    return new ClearStuckPendingRequestCall__Inputs(this);
  }

  get outputs(): ClearStuckPendingRequestCall__Outputs {
    return new ClearStuckPendingRequestCall__Outputs(this);
  }
}

export class ClearStuckPendingRequestCall__Inputs {
  _call: ClearStuckPendingRequestCall;

  constructor(call: ClearStuckPendingRequestCall) {
    this._call = call;
  }

  get player(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClearStuckPendingRequestCall__Outputs {
  _call: ClearStuckPendingRequestCall;

  constructor(call: ClearStuckPendingRequestCall) {
    this._call = call;
  }
}

export class WithdrawTreasuryCall extends ethereum.Call {
  get inputs(): WithdrawTreasuryCall__Inputs {
    return new WithdrawTreasuryCall__Inputs(this);
  }

  get outputs(): WithdrawTreasuryCall__Outputs {
    return new WithdrawTreasuryCall__Outputs(this);
  }
}

export class WithdrawTreasuryCall__Inputs {
  _call: WithdrawTreasuryCall;

  constructor(call: WithdrawTreasuryCall) {
    this._call = call;
  }
}

export class WithdrawTreasuryCall__Outputs {
  _call: WithdrawTreasuryCall;

  constructor(call: WithdrawTreasuryCall) {
    this._call = call;
  }
}
